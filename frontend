let board = [];
let score = 0;
let highScore = localStorage.getItem('highScore') || 0;
let playerName = '';

// Initialize game board
function initializeBoard() {
    board = Array(4).fill().map(() => Array(4).fill(0));
    score = 0;
    document.getElementById('score').textContent = score;
    document.getElementById('high-score').textContent = highScore;
    addNewNumber();
    addNewNumber();
    updateDisplay();
}

// Start game
function startGame() {
    playerName = document.getElementById('player-name-input').value;
    if (playerName.trim() === '') {
        alert('Please enter your name');
        return;
    }

    document.getElementById('player-name').textContent = playerName;
    document.getElementById('name-input-container').style.display = 'none';
    initializeBoard();
}

// Add new number to the board
function addNewNumber() {
    let available = [];
    for (let i = 0; i < 4; i++) {
        for (let j = 0; j < 4; j++) {
            if (board[i][j] === 0) {
                available.push({ x: i, y: j });
            }
        }
    }
    if (available.length > 0) {
        let randomCell = available[Math.floor(Math.random() * available.length)];
        board[randomCell.x][randomCell.y] = Math.random() < 0.9 ? 2 : 4;
    }
}

// Update display
function updateDisplay() {
    const gameBoard = document.getElementById('game-board');
    gameBoard.innerHTML = '';

    for (let i = 0; i < 4; i++) {
        for (let j = 0; j < 4; j++) {
            const tile = document.createElement('div');
            tile.className = 'tile';
            if (board[i][j] !== 0) {
                tile.textContent = board[i][j];
                tile.setAttribute('data-value', board[i][j]);
            }
            gameBoard.appendChild(tile);
        }
    }
}

// Handle key press
document.addEventListener('keydown', handleInput);

function handleInput(event) {
    if (!playerName) return; // Return if name is not entered

    let moved = false;

    switch (event.key) {
        case 'ArrowUp':
            moved = moveUp();
            break;
        case 'ArrowDown':
            moved = moveDown();
            break;
        case 'ArrowLeft':
            moved = moveLeft();
            break;
        case 'ArrowRight':
            moved = moveRight();
            break;
        default:
            return;
    }

    if (moved) {
        addNewNumber();
        updateDisplay();

        if (score > highScore) {
            highScore = score;
            localStorage.setItem('highScore', highScore);
            document.getElementById('high-score').textContent = highScore;
        }

        if (checkGameOver()) {
            alert('Game Over! Your score: ' + score);
        }
    }
}

function moveLeft() {
    let moved = false;
    for (let i = 0; i < 4; i++) {
        let row = board[i].filter(cell => cell !== 0);
        for (let j = 0; j < row.length - 1; j++) {
            if (row[j] === row[j + 1]) {
                row[j] *= 2;
                score += row[j];
                row.splice(j + 1, 1);
                moved = true;
            }
        }
        while (row.length < 4) {
            row.push(0);
        }
        if (row.join(',') !== board[i].join(',')) {
            moved = true;
        }
        board[i] = row;
    }
    document.getElementById('score').textContent = score;
    return moved;
}

function moveRight() {
    let moved = false;
    for (let i = 0; i < 4; i++) {
        let row = board[i].filter(cell => cell !== 0);
        for (let j = row.length - 1; j > 0; j--) {
            if (row[j] === row[j - 1]) {
                row[j] *= 2;
                score += row[j];
                row.splice(j - 1, 1);
                moved = true;
            }
        }
        while (row.length < 4) {
            row.unshift(0);
        }
        if (row.join(',') !== board[i].join(',')) {
            moved = true;
        }
        board[i] = row;
    }
    document.getElementById('score').textContent = score;
    return moved;
}

function moveUp() {
    let moved = false;
    for (let j = 0; j < 4; j++) {
        let column = [board[0][j], board[1][j], board[2][j], board[3][j]];
        column = column.filter(cell => cell !== 0);
        for (let i = 0; i < column.length - 1; i++) {
            if (column[i] === column[i + 1]) {
                column[i] *= 2;
                score += column[i];
                column.splice(i + 1, 1);
                moved = true;
            }
        }
        while (column.length < 4) {
            column.push(0);
        }
        for (let i = 0; i < 4; i++) {
            if (board[i][j] !== column[i]) {
                moved = true;
            }
            board[i][j] = column[i];
        }
    }
    document.getElementById('score').textContent = score;
    return moved;
}

function moveDown() {
    let moved = false;
    for (let j = 0; j < 4; j++) {
        let column = [board[0][j], board[1][j], board[2][j], board[3][j]];
        column = column.filter(cell => cell !== 0);
        for (let i = column.length - 1; i > 0; i--) {
            if (column[i] === column[i - 1]) {
                column[i] *= 2;
                score += column[i];
                column.splice(i - 1, 1);
                moved = true;
            }
        }
        while (column.length < 4) {
            column.unshift(0);
        }
        for (let i = 0; i < 4; i++) {
            if (board[i][j] !== column[i]) {
                moved = true;
            }
            board[i][j] = column[i];
        }
    }
    document.getElementById('score').textContent = score;
    return moved;
}

async function saveHighScore(playerName, score) {
    try {
        const response = await fetch('http://localhost:3000/api/scores', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                playerName,
                score
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        console.log('Score saved successfully:', result);
        return result;
    } catch (error) {
        console.error('Error saving score:', error);
        throw error;
    }
}

function checkGameOver() {
    // Check for empty cells
    for (let i = 0; i < 4; i++) {
        for (let j = 0; j < 4; j++) {
            if (board[i][j] === 0) return false;
        }
    }

    // Check for horizontal merges
    for (let i = 0; i < 4; i++) {
        for (let j = 0; j < 3; j++) {
            if (board[i][j] === board[i][j + 1]) return false;
        }
    }

    // Check for vertical merges
    for (let i = 0; i < 3; i++) {
        for (let j = 0; j < 4; j++) {
            if (board[i][j] === board[i + 1][j]) return false;
        }
    }

    // Game is over, save the score
    saveHighScore(playerName, score)
        .then(() => {
            alert(`Game Over! Your score: ${score} has been saved!`);
        })
        .catch(error => {
            alert(`Game Over! Score: ${score}\nError saving score: ${error.message}`);
        });

    return true;
}